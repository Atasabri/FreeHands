//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FreeHands.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB : DbContext
    {
        public DB()
            : base("name=DB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Datum> Data { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Offer> Offers { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<OrderOption> OrderOptions { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product_Rates> Product_Rates { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Provider_Rates> Provider_Rates { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<Subscriber> Subscribers { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int RateProduct(Nullable<double> rate, Nullable<int> product_ID, string comment, Nullable<int> user_ID, ObjectParameter returnValue)
        {
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RateProduct", rateParameter, product_IDParameter, commentParameter, user_IDParameter, returnValue);
        }
    
        public virtual int RateProvider(Nullable<double> rate, Nullable<int> user_ID, string comment, Nullable<int> provider_ID, ObjectParameter returnValue)
        {
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var provider_IDParameter = provider_ID.HasValue ?
                new ObjectParameter("Provider_ID", provider_ID) :
                new ObjectParameter("Provider_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RateProvider", rateParameter, user_IDParameter, commentParameter, provider_IDParameter, returnValue);
        }
    }
}
